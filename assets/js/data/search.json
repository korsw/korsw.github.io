[ { "title": "2022년 올해의 컬러, 베리 페리(Very Peri)", "url": "/posts/Design-With-Pantone-Color-Of-The-Year-2022/", "categories": "Tip, Design", "tags": "design, color", "date": "2022-02-11 17:00:00 +0900", "snippet": "Pantone이 선정한 올해의 컬러는 베리 페리(PANTONE 17-3938 Very Peri)다팬톤 색상 코드는 Pantone 17-3938, RBG는 102, 103, 171, HEX는 #6667AB이다그냥 기록용입니다" }, { "title": "안드로이드 활동 수명 주기 단계", "url": "/posts/Stages-of-the-activity-lifecycle/", "categories": "Android, Android Theory", "tags": "android, activity, lifecycle", "date": "2022-02-10 22:27:07 +0900", "snippet": "잘못된 정보가 많을 수 있는 포스트입니다. 점차 수정중입니다안드로이드에도 최초 초기화부터 메모리 회수까지의 라이프 사이클이 존재한다.액티비티를 실행하고, 뒤로가고, 일시정지하고, 등등… 다양한 경우가 있기 때문에 이에 맞춰 변하는 라이프 사이클을 알면 좋을 것 같아서 글을 작성한다Activity Lifecycle액티비티 라이프 사이클액티비티는 액티비티 스택에 의해서 관리된다.보통 새로운 액티비티가 시작되면 스택의 맨 위에 배치되어 실행된다.그 전에 실행되고 있던 액티비티는 스택의 아래에 남아있고, 새로운 액티비티가 종료되기 전까지는 다시 나타나지 않는다.물론 한 화면에 여러개의 액티비티가 보일 수 있다.액티비티의 상태에는 네 가지가 존재한다. 상태 의미 running 스택의 가장 높은 위치에 존재하며 화면에 실행중인 상태 visible 포커스는 잃었지만, 사용자에게 보이는 상태- 모든 상태와 정보를 유지하는 중 stopped or hidden 액티비티가 다른 엑티비티로 인해 완전히 가려지는 경우- 모든 상태와 정보를 유지하는 중- 다른 곳에서 메모리가 필요하면 kill 가능 destroyed 시스템으로부터 액티비티 종료가 되거나, kill 당하는 상태- 다시 표시될 때, 완전히 다시 시작하고 이전 상태로 복원해야 함 이러한 상태를 그림으로 표현하면 아래와 같다액티비티 라이프 사이클 다이어그램ReferenceActivity Lifecycle활동 수명 주기에 관한 이해" }, { "title": "AndroidTest의 AndroidJUnit4 requires a public constructor that takes a Class 에러 해결", "url": "/posts/AndroidJUnit4-requires/", "categories": "Android, AndroidTest", "tags": "android, androidtest", "date": "2022-02-06 22:54:12 +0900", "snippet": "안드로이드 테스트를 공부하던 중에 정말 짜증나는 에러가 있었다.java.lang.RuntimeException: Delegate runner androidx.test.internal.runner.junit4.AndroidJUnit4ClassRunner for AndroidJUnit4 requires a public constructor that takes a Class&amp;lt;?&amp;gt;.위 에러코드가 발생하면서 테스트 코드가 정상작동하지 않았다. 하루종일 헤매다가 gradle을 만지다가 해결했다.dependencies { /** * dependencies */ implementation &#39;androidx.test.ext:junit-ktx:1.1.3&#39; androidTestImplementation &#39;junit:junit:4.12&#39; androidTestImplementation &#39;com.android.support.test.espresso:espresso-contrib:3.0.2&#39;}문제없다고 생각했던,,, gradle 모듈을dependencies { /** * dependencies */ implementation &#39;androidx.test.ext:junit-ktx:1.1.3&#39; testImplementation &#39;junit:junit:4.+&#39; androidTestImplementation &#39;androidx.test.ext:junit:1.1.2&#39; androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.3.0&#39; androidTestImplementation &#39;androidx.test.espresso:espresso-contrib:3.3.0&#39; debugImplementation &quot;androidx.fragment:fragment-testing:1.3.3&quot;}위와 같이 변경했더니 해결되었다.아니 이게 뭐여" }, { "title": "컬렉션(Collection)을 알아보자", "url": "/posts/what-is-collections/", "categories": "", "tags": "kotlin, collection", "date": "2022-01-25 22:38:50 +0900", "snippet": "컬렉션(collection)은 요소(elements) 또는 항목(items)라고 부르는 동일한 타입을 가진 개체들의 그룹이다.Java나 Python의 컬렉션과 동일하게 List, Set, Map이 존재한다.ListList(리스트)는 인덱스를 이용하여 요소에 액세스할 수 있는 정렬된 그룹으로 중복된 요소가 존재할 수 있다.ex) 전화번호 목록SetSet(집합)은 순서에 상관없이 중복없이 고유한 요소들이 존재하는 그룹이다.수학에서 말하는 그 집합과 유사하다ex) 복권 번호Map(or Dictionary)Map(맵)은 키-값 쌍으로 이뤄진 요소들의 그룹이다.키는 고유하며, 각 키는 하나의 값만을 매핑하게 된다. 이때 값은 중복이 가능하다.ex) 직원 id" }, { "title": "코틀린의 가변인자(vararg)를 알아보자", "url": "/posts/kotlin-vararg/", "categories": "Kotlin", "tags": "kotlin, vararg", "date": "2022-01-19 01:13:22 +0900", "snippet": "vararg코틀린을 사용하다가 함수나 클래스 등등에 여러개의 파라미터를 넘겨야 할 경우가 생기는 경우가 빈번하게 발생한다.이럴때 사용할 수 있는게 vararg(Variable number of arguments)이다fun &amp;lt;T&amp;gt; asList(vararg ts: T): List&amp;lt;T&amp;gt; { val result = ArrayList&amp;lt;T&amp;gt;() for (t in ts) result.add(t) return result}위와 같이 파라미터에 vararg를 사용하여 함수의 파라미터를 받을 수 있다.이때 파라미터 하나에만 사용할 수 있으며 보통 마지막 파라미터에 사용한다val list = asList(1, 2, 3)이렇게 사용한다배열을 vararg로 넘길 경우소제목부터 이게 무슨소리인가? 배열을 vararg로 넘기다니?말 그대로이다. vararg 인자를 받는 함수의 파라미터로 배열을 넣는것이다.그냥 넣으면 오류가 발생한다. 이 오류를 해결하기 위해 spread operator(스프레드 연산자)를 사용한다.사용 방법은 간단하다. 파라미터로 넘길때 해당 파라미터 앞에 *를 붙여주면 된다.val a = arrayOf(1, 2, 3)val list = asList(-1, 0, a, 4) // 오류발생! 스프레드 연산자가 없어요!val list = asList(-1, 0, *a, 4)이런식으로 말이다.기본형 배열(primitive type array)을 vararg로 넘길 경우ByteArray, ShortArray, IntArray와 같은 기본형 배열들의 경우 그냥 vararg 파라미터로 넘길 경우 오류가 발생한다.이를 방지하기 위해 toTypedArray() 함수를 사용하여 일반형(regular)으로 변환한 후 파라미터로 넘겨야한다.val a = intArrayOf(1, 2, 3) // 기본형 배열 IntArrayval list = asList(-1, 0, *a.toTypedArray(), 4)위와 같이 *배열.toTypedArray() 형태로 사용하면 된다.ReferenceVariable number of arguments (varargs)﻿" }, { "title": "안드로이드 스튜디오, import 자동 설정", "url": "/posts/how-to-auto-import/", "categories": "Android, Android Kotlin", "tags": "android, androidstudio", "date": "2022-01-10 22:56:55 +0900", "snippet": "다른 클래스를 사용하거나 추가적은 라이브러리를 사용하는 등, import를 할 상황은 많이 있다. 너무 귀찮다!다행히 안드로이드 스튜디오에서 이러한 import를 자동적으로 할 수 있는 설정을 제공하고 있다.물론 자동 추가뿐만 아니라 사용하지 않는 import는 자동적으로 삭제해준다. File &amp;gt; New Project Settings &amp;gt; Preferences for New Projects Other Settings &amp;gt; Auto Import &amp;gt; Add unambiguous imports on the fly, Optimize imports on the fly (for current project) 체크Add unambiguous imports on the fly는 자동 추가이며, Optimize imports on the fly는 자동 삭제이다이렇게 설정하면 import가 정말 편해진다." }, { "title": "Github 저장소(repository) 이름 수정하기", "url": "/posts/how-to-change-github-repository-name/", "categories": "Tip, Github", "tags": "github", "date": "2022-01-09 23:10:52 +0900", "snippet": "GitHub를 사용하다가 간혹 저장소 이름을 변경하고 싶을 경우가 있다.생각보다 간단한 방법으로 변경할 수 있는것이 너무 좋다 ㅎㅎRepository name 변경우선 GitHub에서 변경할 저장소의 Setting에 들어가 Repository name을 변경해준다.이러면 Github 저장소의 이름과 그에 따른 주소가 변경이 되지만 로컬의 git은 설정되지 않아 정상적인 동작이 되지 않을것이다.remote설정을 변경해주자git remote set-url origin &quot;변경된 Github URL&quot;git remote -v #변경 내역 확인이러면 변경이 완료되어 로컬에서 git이 문제없이 작동될것이다." }, { "title": "함수형 프로그래밍", "url": "/posts/Functional-Programming/", "categories": "Dev, common", "tags": "Functional Programming", "date": "2022-01-05 23:11:57 +0900", "snippet": "코틀린을 공부하다가 함수형 프로그래밍 개념을 확실하게 알아두는것이 좋을 것 같아서 한번 정리하고 가야겠다는 생각이 들었다.함수형 프로그래밍은 가독성과 유지보수 용이성의 향상을 위해 거의 모든 것을 순수 함수로 나누어 구성하는 것이다. 함수형 프로그래밍의 특징은 다음과 같다. first class 함수 불변성(immutability) side effect 없음first class 함수first class 함수는 함수를 일반 값처럼 다룰 수 있다는 뜻이다. 함수를 변수에 저장할 수 있고, 파라미터로도 사용 가능하며, 함수로 반환도 가능하다는 것이다.불변성(immutability)불변성은 내부 상태가 변경되지 않는 불변 객체를 사용해 작성한다는 것이다.side effect 없음같은 입력값에 대한 출력이 항상 같고, 다른 객체의 상태를 변경시키지 않고, 다른 함수를 포함한 외부와 상호작용하지 않는 순수 함수(pure funtion)을 사용한다는 것이다." }, { "title": "디자인할때 참고, 사용할 사이트들", "url": "/posts/Design-site/", "categories": "Tip, Design", "tags": "design", "date": "2022-01-04 19:42:34 +0900", "snippet": "참고 사이트디자인 참고핀터레스트비핸스드리블머티리얼 디자인 - 컬러 툴폰트눈누이미지 소스Life Of Pixpixabay이모지 아이콘 소스이모지피디아색감 소스Fresh Background Gradients2 Color Combinations유용한 툴 사이트온라인 사진 에디터removebg 백그라운드 제거목업 프리뷰" }, { "title": "TextView 사용법", "url": "/posts/create-TextView/", "categories": "Android, Android Kotlin", "tags": "android, kotlin, View", "date": "2022-01-04 00:00:00 +0900", "snippet": "안드로이드에서 텍스트를 띄우는 방법은 간단하다.그냥 TextView를 쓰면 된다!TextView 생성 및 위치 설정안드로이드 스튜디오를 킨 후 xml Palette에서 드래그 앤 드롭을 하거나,우측 상단에 code를 누른 후 xml에 직접 작성해주면 된다.이때 두 방법 모두 에러가 발생하는 것을 알 수 있는데 두가지 이유이다. Missing Constraints in ConstraintLayout레이아웃 배치가 명확하지 않아 앱 실행시 원하는 위치에 보이지 않을 가능성에 대한 경고 Hardcoded text@string resource 사용 권장2번은 편의성을 위한 경고이지만 1번은 심각하다. 정말 원하는 동작이 이루워지지 않을 가능성이 크기 때문이다.이를 해결하기 위한 방법은 단순하다 Layout에 대한 수평(horizontal), 수직(vertical)을 설정해주면 된다.디자인뷰에서 설정파란색 원을 드래그해서 상위레이아웃에 제약조건을 맞추거나 직접 숫자를 설정하면 된다.xml에 작성방법직접 작성하기 위해선 알아야할것이 margin과 layout_constrain형식들이다.margin margin 의미 예시 layout_marginStart 시작(왼쪽)으로부터의 간격 android:layout_marginStart=”100dp” layout_marginTop 상단으로부터의 간격 android:layout_marginTop=”100dp” layout_marginEnd 끝(오른쪽)으로부터의 간격 android:layout_marginEnd=”100dp” layout_marginBottom 하단으로부터의 간 android:layout_marginBottom=”100dp” 모두 안하고 수직,수평 하나씩 해줘도 된다.layout_constrain layout_constrain 의미 예시 layout_constraintStart_toStartOf 시작(왼쪽)을 다른 뷰의 시작(왼쪽)을 기준으로 제약 app:layout_constraintStart_toStartOf=”parent” layout_constraintStart_toEndOf 시작(왼쪽)을 다른 뷰의 끝(오른쪽)을 기준으로 제약 app:layout_constraintStart_toEndOf=”parent” layout_constraintTop_toTopOf 상단을 다른 뷰의 상단을 기준으로 제약 app:layout_constraintTop_toTopOf=”parent” layout_constraintTop_toBottomOf 상단을 다른 뷰의 하단을 기준으로 제약 app:layout_constraintTop_toBottomOf=”parent” layout_constraintEnd_toEndOf 끝(오른쪽)을 다른 뷰의 끝(오른쪽)을 기준으로 제약 app:layout_constraintEnd_toEndOf=”parent” layout_constraintEnd_toStartOf 끝(오른쪽)을 다른 뷰의 시작(왼쪽)을 기준으로 제약 app:layout_constraintEnd_toStartOf=”parent” layout_constraintBottom_toBottomOf 하단을 다른 뷰의 하단을 기준으로 제약 app:layout_constraintBottom_toBottomOf=”parent” layout_constraintBottom_toStartOf 하단을 다른 뷰의 상단을 기준으로 제약 app:layout_constraintBottom_toStartOf=”parent” 모두 안하고 수직,수평 하나씩 해줘도 된다. 굳이? 정말?이와 같이 두가지 방법이 존재한다." }, { "title": "시작 메뉴에서 bing 검색을 제거해보자", "url": "/posts/remove-bing-search/", "categories": "Tip, windows 11", "tags": "tip, bing, windows 11", "date": "2022-01-02 00:52:34 +0900", "snippet": "나는 윈도우에서 프로그램을 실행할 때, window 키를 누르고 프로그램명을 검색해서 실행하는 편이다.이때 오타가 발생한 경우 혹은 없는 프로그램을 검색하고 엔터를 누른 경우 ms edge를 통해 해당 내용이 검색된다.이 기능이 너무 싫기에 시작 메뉴의 웹 검색을 비활성화 방법을 찾았다.레지스트리 변경Win + R을 동시에 눌러 실행창을 실행한 후 regdit을 입력하여 레지스트리 편집기를 실행한다.실행레지스트리 편집기편집기를 실행했으니 원하는 부분에 키를 생성해야한다컴퓨터\\HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows위 경로로 이동한 후 우클릭을 통해 키를 생성하자새로 만들기(N) -&amp;gt; 키(K)생성된 폴더이름을 Explorer로 수정폴더에 들어가서 빈 공간에서 우클릭새로 만들기(N) -&amp;gt; DWORD(32-bit) 값(D)생성된 레지스트리 이름 DisableSearchBoxSuggestions로 수정더블클릭해서 값 1로 변경 후 저장이제 재부팅하면 웹 검색이 없어진다!ReferenceHow to Remove Bing Search Results From Windows 11 Start Menu" }, { "title": "안드로이드 스튜디오 설치 및 프로젝트 만들기", "url": "/posts/start-androidstudio/", "categories": "Android, Android Kotlin", "tags": "android, androidstudio", "date": "2022-01-01 21:13:09 +0900", "snippet": "안드로이드를 개발하려면 안드로이드의 IDE(Integrated Development Environment)부터 설치해야한다.안드로이드의 IDE는 안드로이드 스튜디오다1. 안드로이드 스튜디오 설치안드로이드 스튜디오에서 안드로이드 스튜디오 설치 파일을 받아서 설치하자 2. 프로젝트 생성설치가 완료된 안드로이드 스튜디오를 실행하면 프로젝트를 생성할 수 있는 화면이 나온다.안드로이드 스튜디오 실행 화면여기서 new project를 누른다.Project 생성안드로이드 스튜디오에서 제공하는 여러가지 템플릿들을 확인할 수 있다.우리는 여기서 빈 엑티비티 하나만 있는 프로젝트를 생성하기 위해 Empty Activity선택해 생성해보자crates project!위와 같은 프로젝트 기본 설정 화면이 나올것이다. Tage 의미 name 프로젝트 이름 Package name Android System에서 인식하기 위한 고유 이름보통 조직이름.앱 이름형태로 소문자로 구성 Save location 프로젝트 저장 경로 Language 개발 언어 선택Kotlin, Java Minimum SDK 요구할 안드로이드 최소 버전 위 표는 각 tage별 설명을 간략화 한것이다.우리는 Kotlin을 사용할 것이고, 보통 안드로이드 4.4이상을 요구하기 때문에 이것만 설정하고 나머지는 자신의 환경에 맞게 설정하자할건 다 했다. Finish를 누르자!프로젝트 실행 화면하단에 로딩이 진행중일 것이다. 조금 기다리면 모든 설정이 끝난다.여기서 안드로이드 스마트폰을 연결하여 Run - Run ‘app’Shift + F10을 누르면 스마트폰에 어플 설치 및 실행이 진행된다.난 안드로이드 스마트폰이 없고, 있어도 연결하기 귀찮다면? 가상으로 만들자!3. AVD(Android Virtual Device) 만들기AVD(Android Virtual Device)는 말 그대로 안드로이드 가상 머신이다. 설치 방법 정말 쉽다!Tools -&amp;gt; AVD Manager -&amp;gt; + Create Virtual Device -&amp;gt; 원하는 기기 선택 -&amp;gt; 원하는 버전 다운모르면 맨 위꺼 받자 -&amp;gt; AVD name 작성 -&amp;gt; Finish끝! 이제 가상머신을 활용할 수 있다!ReferenceAndroid 스튜디오 소개" }, { "title": "Kotlin의 List를 알아보자", "url": "/posts/kotlin-list/", "categories": "Kotlin", "tags": "kotlin, list", "date": "2021-12-28 00:43:59 +0900", "snippet": "List는 여러개의 값을 순서 있게 저장하는 데이터 유형이다. List 형태 의미 예시 List List 생성 이후 수정 불가 val numbers: List = listOf(1, 2, 3) MutableList MutableList 생성 이후 수정 가능 val numbers: MutableList = mutableListOf(1, 2, 3) List와 MutableList 두가지가 있지만 List사용을 권장하고 있다. 그래도 List와 MutableList의 기능엔 무엇이 있는지 알아보자 List 형태 의미 예시 reversed() .reversed() 리스트 역순 출력 list.reversed() sorted() .sorted() 리스트 요소 정렬 후 출력 list.sorted() MutableList 형태 의미 예시 add .add(index, elements) 인덱스(생략시 맨 뒤)에 요소 추가성공시 true, 실패시 false 반환 mutableList.add(3)mutableList.add(0, 3) addAll .addAll(index, list) 인덱스(생략시 맨 뒤)에 리스트 추가 mutableList.addAll(List)mutableList.addAll(0, List) set set(index, elements) 인덱스의 값을 요소값으로 변환 후인덱스에 있던 값 반환 mutableList.set(1, 3) iterator iterator()listIterator() iterator 반환 mutableList.iterator()mutableList.listIterator() clear .clear() 요소 삭제 mutableList.clear() remove .remove(elements) 요소 찾아서 삭제삭제시 true, 실패시 false 반환 mutableList.remove(1) removeAll .remove(list) 주어진 list에 포함된 요소 찾아서 삭제삭제시 true, 실패시 false 반환 mutableList.remove(list) removeAt .removeAt(index) 해당 인덱스 요소 반환 후 삭제 mutableList.removeAt(1) retainAll .retainAll(list) list에 존재하는 요소 빼고 전부 삭제 mutableList.retainAll(list) isEmpty .isEmpty() 리스트가 비어있는지 확인비었으면 true 요소가 존재하면 false 반환 mutableList.isEmpty() " }, { "title": "Kotlin의 반복문을 알아보자 (for, repeat, while, do while)", "url": "/posts/loop/", "categories": "Kotlin", "tags": "kotlin, loop", "date": "2021-12-25 16:31:53 +0900", "snippet": "forfor는 지정된 횟수만큼 함수 동작을 반복하는 반복문이다. 문법은 다음과 같다.for (item in collection) print(item)item을 collection 함수에 따라 순회하며 반복, 변화하는 것이다.collection 함수는 forEach, filter, rangeTo 등이 있는데 나중에 알아보자사용은 어떻게 해야하는가?for (item: Int in ints) { print(item)}item은 Int형 변수이고 ints의 이터레이터(iterator)를 가진다. 즉 ints만큼 반복하며 print(item)을 실행하는 것이다.여기서 이터레이터(iterator)란 개념이 나온다.이터레이터(iterator)는 컬렉션(collection)에 저장되어 있는 요소를 가져오는것이다.이것도 나중에…ints에는 어떤게 들어가야할까? kotlin.ranges 형태 의미 예시 rangeTo() start..end start부터 end까지 반복 반환 1..8 downTo end downTo start end부터 start까지 역순으로 반복 반환 8 downTo 1 until start until end start부터 end미만까지 반복 반환 1 until 8 step rangTo() downTo        step num until num 간격으로 실행 1..8 step 28 downTo 1 step 21 until 8 step 2 이를 활용해서 예제코드를 작성해보면 다음과 같다.fun main() { println(&quot;rangeTo()&quot;) for (i in 1..8) { rangesPrint(i) } println(&quot;\\ndownTo&quot;) for (i in 8 downTo 1) { rangesPrint(i) } println(&quot;\\nuntil&quot;) for (i in 1 until 8) { rangesPrint(i) } println(&quot;\\nrangeTo() step&quot;) for (i in 1..8 step 2) { rangesPrint(i) } println(&quot;\\ndownTo step&quot;) for (i in 8 downTo 1 step 2) { rangesPrint(i) } println(&quot;\\nuntil step&quot;) for (i in 1 until 8 step 2) { rangesPrint(i) }}fun rangesPrint(num: Int){ print(num) print(&quot; &quot;)}----------실행결과----------rangeTo()1 2 3 4 5 6 7 8 downTo8 7 6 5 4 3 2 1 until1 2 3 4 5 6 7 rangeTo() step1 3 5 7 downTo step8 6 4 2 until step1 3 5 7 rangeTo()는 순차적, downTo는 역순, until은 마지막을 제외한 순차적임을 확인할 수 있고,step은 2 간격으로 건너뜀을 확인할 수 있다. repeatrepeat는 for문을 사용하는 inline 함수이다.즉, 지정된 횟수만큼 지정된 함수 동작을 실행하는 반복문이다. 이때 zero-base index가 동작에 대한 매개 변수로 전달되어 실행하게 된다.inline fun repeat(times: Int, action: (Int) -&amp;gt; Unit)함수 원형@kotlin.internal.InlineOnlypublic inline fun repeat(times: Int, action: (Int) -&amp;gt; Unit) { contract { callsInPlace(action) } for (index in 0 until times) { action(index) }}함수 원형 내부사용법은 for문보다 단순하다. repeat()에 파라미터로 반복할 숫자를 넣어주면 된다 단 앞에서 언급했듯이 zero-base index이므로 0부터 파라미터-1까지의 반복이다.이를 활용해서 예제코드를 작성해보면 다음과 같다.fun main(){ repeat(3) { println(&quot;Hello&quot;) } repeat(3) { index -&amp;gt; println(&quot;Hello with index $index&quot;) }}----------실행결과----------HelloHelloHelloHello with index 0Hello with index 1Hello with index 2while &amp;amp; do whilewhile문과 do while문은 조건이 만족되는 동안에는 지속적인 반복 실행을 하는 반복문이다.두 반복문의 차이점은 조건을 확인하는 시간과 방식이다. While loops﻿ 형태 의미 while while (condition) {        foo()} 조건문을 만족하면 반복 실행 do while do {        foo()} while (condition) 한번 실행하고, 조건문을 만족하면 반복 실행 즉 while문은 조건문이 만족해야만 실행하지만, do while문은 무조건 한번은 실행하게된다.이를 확인한 예제 코드는 다음과 같다.fun main(){ var whileVar: Int = 3 while(whileVar &amp;gt; 0){ println(&quot;Hello while&quot;) whileVar-- } do{ println(&quot;Hello do while&quot;) }while (whileVar &amp;gt; 0)}----------실행결과----------Hello whileHello whileHello whileHello do whilewhileVar가 이미 0보다 작음에도 한번 실행되어 Hello do while이 출력됨을 확인할 수 있다.break &amp;amp; continue반복문 중간에 나갈수는 없는걸까? 아니다! 탈출할 수 있다.탈출의 경우 break와 continue를 이용해 탈출할 수 있는데 차이점이 존재한다. 형태 의미 break 가장 근접한 엔클로징 구문을 끝냄 continue 가장 근접한 엔클로징 다음 단계 실행 뭔소리일까? 예제 코드를 작성해서 확인해보자fun main(){ println(&quot;break&quot;) for (i in 1..8) { var x = i rangesPrint(i) if (i == 3) break } println(&quot;\\ncontinue&quot;) for (i in 1..8) { var x = i rangesPrint(i) if (i == 3) continue }}fun rangesPrint(num: Int){ print(num) print(&quot; &quot;)}----------실행결과----------break1 2 3 continue1 2 3 4 5 6 7 8 break는 아예 탈출했지만, continue는 계속 실행되었다. continue를 왜 쓰지? 란 물음이 생기는건 당연하다. 여기에선 알기 힘들지만 when문을 알아볼 시간에 확실히 알게 될것이다.ReferenceKotlin repeatKotlin Conditions and loops" }, { "title": "코딩 규칙(coding convention)을 알아보자! 카멜 표기법, 파스칼 표기법, 스네이크 표기법", "url": "/posts/coding-convention/", "categories": "Dev, common", "tags": "coding convention", "date": "2021-12-24 18:16:07 +0900", "snippet": "프로젝트를 여러명이 진행할때 서로의 코드 작성방식이 어려우면 가독성이 떨어질 수 있다. 이를 방지하기 위해 코딩 작성 규칙(coding convention)이 존재한다.카멜 표기법(camelCase) 케이스 작성방법 예시 함수, 변수명 첫 단어만 소문자, 이후 단어의 첫 글자를 대문자로 작성 fun onCreateActivity()var numValue: Int 보통 함수, 변수명 등에 사용된다.파스칼 표기법(PascalCase) 케이스 작성방법 예시 클래스명 단어의 첫 글자를 대문자로 작성 class MainActivity 보통 클래스명에 사용되지만 함수, 변수명에도 사용된다.스네이크 표기법(snake_case) 케이스 작성방법 예시 함수, 변수명 모두 소문자로 작성하며 단어를 _로 구분 fun on_create_activity()var num_value: Int 보통 함수, 변수명 등에 사용된다.상수 케이스 작성방법 예시 상수 모두 대문자로 작성 const val HELLO: String = “hello”const val CHECK_MESSAGE: String = “check” 상수는 대문자로 쓰자!ReferenceKotlin 스타일 가이드고돈호 (2021). 이것이 안드로이드다 with 코틀린, 한빛미디어" }, { "title": "Kotlin 키워드 (fun, val, var)", "url": "/posts/Kotlin-fun-val-var/", "categories": "Kotlin", "tags": "kotlin, class", "date": "2021-12-24 15:08:09 +0900", "snippet": "함수코틀린에서 함수를 정의할때 fun 키워드를 사용한다.fun main() { foo()}이런식으로 작성하여 사용한다.함수를 사용하다보면 파라미터를 넣어야할 경우가 생기는데 파라미터를 넣을때 뒤에 : 자료형 형태로 정의해야한다fun main(bar: String) { foo()} 위의 코드에서 main함수에 String형태의 bar를 넘겨준것을 알 수 있다.함수의 경우도 반환값이 있을 수 있다. 이 또한 함수 선언 뒤에 : 자료형 형태로 정의해야한다.fun main(bar: String): Int { foo()} Int값을 반환하는 함수를 선언했다.물론 반환값이 없거나 의미없는 경우도 있을텐데 이 경우 Unit을 사용한다.fun main(bar: String): Unit { println(&quot;foo&quot;)()} 다행스럽게도 Unit은 생략가능하다.변수코틀린에서 변수는 val, var두가지가 존재한다.valval는 읽기전용 지역변수를 선언할때 사용된다. 즉, 값 변경이 불가능하다.fun main() { val foo: Int = 0 val bar = 0 val foobar: Int} 여기서 확인할 수 있는건 foo 변수와 같이 : 자료형 형태로 자료형을 정의할 수 있다는 것이다.물론 bar 변수와 같이 선언해도 자동으로 Int형으로 유추해서 설정해준다.또한 foobar 변수처럼 초기화가 안됐을 때 변수 선언만 하고 나중에 초기화할 수 있다.varvar는 수정 가능한 변수이다.fun main() { var foo: Int = 0 foo = 1} foo가 0에서 1로 변경된다.ReferenceBasic syntax" }, { "title": "코틀린을 알아보자", "url": "/posts/Kotlin-basic/", "categories": "Kotlin", "tags": "Kotlin", "date": "2021-12-23 17:03:33 +0900", "snippet": "이 글은 Kotlin In Action을 읽으며 정리한 글입니다. 자세한 내용은 책을 구매해서 봅시다!코틀린이란?자바 플랫폼에서 돌아가는 언어로, 간결하고 자바와 상호운용성을 중시하는 것이 특징이다.코틀린의 특성코틀린의 특성을 몇가지 정의해보면 다음과 같다.실행 플랫폼자바가 실행되는 모든 곳에서 사용이 가능하다. 심지어 자바스크립트도!정적 타입 지정 언어자바와 동일한 특성인데, 이를 설명하면 프로그램 구성 요소의 타입을 컴파일 시점에서 알 수 있고, 프로그램 안에서 객체의 필드, 메소드를 사용할때 마다 컴파일러가 타입을 검증해준는 것이다.한마디로 타입 지정을 안해도 알아서 정의해준다.타입 시스템은 크래스, 인터페이스, 제네릭스 등과 같이 자바와 같지만 한가지 다른점 하나는 nullable type을 지원한다는것이다. 이로 인해 널포인터 오류 발생여부를 확인할 수 있다는 장점이 존재한다.이게 그치지 않고 함수 타입을 지원해서 여러가지 이점이 생겼다. 함수의 파라미터로 다른 함수를 받을 수 있고, 새로은 함수를 반환할 수 있다. 람다식을 지원한다. 데이터 클래스는 불변적(immutable) 값 객체를 간편하게 만들 수 있는 구문 제공 객체와 컬렉션을 함수형 스타일로 다룰 수 있는 API 제공" }, { "title": "Linux에 테마 적용하기 (WhiteSur Gtk Theme)", "url": "/posts/how-to-install-linux-theme/", "categories": "WSL, ubuntu", "tags": "wsl, ubuntu, theme, gnome", "date": "2021-12-23 00:55:39 +0900", "snippet": "GUI를 사용하는김에 기본 우분투의 ui보단 이쁜걸 써보자이번에 적용할 테마는 맥 감성을 지닌 WhiteSur Gtk Theme다.생각보다 간단하게 적용할 수 있었다.그놈 기능 개선 도구 (Gnome Tweaks tool) 설치그놈 기능 개선 도구(Gnome Tweaks tool)는 Gnome 확장 플러그인 관리 도구이다.이 트윅을 설치해야 앞으로 적용할 테마를 적용할 수 있다.sudo apt install gnome-tweak-tool -y위 명령어로 그놈 트윅을 설치할 수 있다.gnome-tweaks위 명령어로 그놈 트윅을 실행할 수 있다.실행된 gnome-tweaks테마 설치WhiteSur Gtk Theme에서 맥스러운 테마를 다운받고,압축을 푼 후 해당 디렉토리로 가서 명령어 한줄만 입력하면 된다../install.sh -s./install.sh -s 실행끝이다! 이제 그놈 트윅에서 설정만 하면 된다.Appearance 탭에서 테마 설정gnome-tweaks을 실행한 후 Appearance - Theme - Applications에서 원하는 테마를 선택하면 적용된다.WhiteSur-light theme 설정WhiteSur-light 테마를 적용했다. 뭔가 부족해보인다좀 더 맥 감성을 살리기 위해 타이틀 바 탭에서도 몇가지 설정을 해주자Windows Titlebars에서 세가지 설정을 해줘야한다.titlebar 설정 Maximize 체크 Minimize 체크 placement left 체크테마 적용 완료!추가적으로 파이어폭스에 테마 적용하는 방법대로 설정을 해봤지만 어쩌서인지 적용되지 않았다.뭔가 잘못 설정한것 같다.또한 sudo 권한으로 실행시 테마가 적용되지 않는 모습을 볼 수 있었다." }, { "title": "Windows 11에서 WSL2 사용 (Ubuntu 20.04 LTS)", "url": "/posts/setting-wsl/", "categories": "WSL, ubuntu", "tags": "wsl, ubuntu", "date": "2021-12-20 21:01:59 +0900", "snippet": "윈도우가 10에서 11로 오면서 제일 크게 변했다고 생각하는 기능은 WSL이 아닐까 싶을 정도로 많이 좋아졌다.GUI가 그냥 된다!WSL 설치하기자동 설치다 귀찮으니 깔끔하게 자동 설치하는 방법이 있다.wsl --install이렇게 입력하면 최신 Linux 커널과, WSL 2를 다운로드 및 설정하며 Ubuntu가 설치된다.수동 설치수동 설치 방법도 있다. 생각보다 간단하다 Windows Subsystem for Linux 옵션 활성화 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Virtual Machine Platform 옵션 활성화 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Linux 커널 업데이트 패키지 다운x64 WSL2 Linux 커널 업데이트 패키지해당 파일을 받아 Linux 커널 업데이트 패키지를 설치한다. WSL 버전을 2로 설정 wsl --set-default-version 2 원하는 Linux 설치Microsoft Store에 들어가서 해당 목록에 있는 것들 설치하거나 설치하고자하는 버전을 검색해서 다운로드 받으면 된다.혹은 Powershell에서 검색해서 설치하는 방법도 있다. wsl --list --online 작성일 기준으로 아래와 같은 목록들이 출력된다. NAME FRIENDLY NAMEUbuntu UbuntuDebian Debian GNU/Linuxkali-linux Kali Linux RollingopenSUSE-42 openSUSE Leap 42SLES-12 SUSE Linux Enterprise Server v12Ubuntu-16.04 Ubuntu 16.04 LTSUbuntu-18.04 Ubuntu 18.04 LTSUbuntu-20.04 Ubuntu 20.04 LTS 이 목록들 중에서 원하는 리눅스를 설치하면 된다. wsl --install -d &amp;lt;distribution&amp;gt; distribution에 원하는 리눅스 이름을 넣으면 설치가 진행된다. ubuntu 서버를 카카오 미러 서버로 변경느린 패키지 업데이트 속도를 올리는 방법이다. 꼭 하자 정말 차원이 다르다나는 Ubuntu 20.04 LTS를 설치했기때문에 그 기준으로 설명하겠다.wsl Ubuntu 20.04 LTS를 실행하여 터미널을 키자.sudo vim /etc/apt/sources.list/etc/apt/sources.list를 켜서 해당 리스트에 있는 서버를 몽땅 바꿀것이다.:%s /archive.ubuntu.com/mirror.kakao.com/이러면 진짜 삶이 달라진다.GUI를 써보자먼저 wsl을 업데이트 해주자wsl --update윈도우 파워셸에서 입력하는 것이다wsl --shutdown재부팅도 시켜주자그 후 wsl을 실행시킨 후 혹시 모르니 패키지도 업데이트 해주자sudo apt update위 명령어로 패키지가 업데이트 될것이다.기본 설정은 완료했으니 GUI 앱을 설치하여 실행할 것이다.sudo apt install gedit -y #에디터sudo apt install gimp -y #이미지 편집기sudo apt install nautilus -y #GNOME desktop 파일 관리자sudo apt install vlc -y #멀티미디어 플레이어sudo apt install x11-apps -y #xclock, xcalc, xeyes 등 gedit #gedit 실행!실행된 gedit 모습테마를 설정해서 저런 모습이지만 GUI가 잘 실행된다.ReferenceInstall WSLManual installation steps for older versions of WSLRun Linux GUI apps on the Windows Subsystem for Linux (preview)" }, { "title": "GitHub 블로그 설정하기", "url": "/posts/make-githubblog-with-wsl/", "categories": "Blog", "tags": "github, wsl, jekyll", "date": "2021-12-19 19:03:00 +0900", "snippet": "블로그를 만들어 공부 내용 정리를 하려다가 블로그 만드는 법도 정리하고자 한다.GitHub의 GitHub page라는 기능을 이용하여 배포를 할 수 있고, jekyll를 이용해 쉽게 생성할 수 있다.GitHub page 생성하기GitHub page로 사용할 repository를 새로 생성해야하는데 이때, Repository name을 [username].github.io로 설정해서 생성해야한다.GitHub page 생성1. Ruby 설정하기jekyll를 이용해 블로그 테마를 설정하고 관리하기 위해서는 ruby를 설치해야한다.Ubuntusudo apt-get install ruby-full build-essential zlib1g-devWindowshttps://rubyinstaller.org/downloads/2. Jekyll 설치 및 테마 설정하기jekyll를 설치해보자gem install jekyll bundler테마 설정하기다음과 같은 명령어로 기본 틀을 생성할 수 있다.jekyll new [경로]그러나 내가 원하는건 보다 그럴듯한 테마를 설장하고 싶기 때문에 다른 분들이 만들어둔 테마를 가져올 것이다.https://jekyllthemes.io/http://jekyllthemes.org/위와 같이 테마를 제공해주는 사이트는 많이 존재한다. 원하는 테마를 찾으면 그 테마를 다운로드한다.그 후 직접 테마를 fork하거나 복붙하는건 본인의 마음이다난 복붙이 편하기 때문에 먼저 생성한 GitHub page를 clone했다.git clone https://github.com/[username]/[username].github.io.git이렇게 clone을 하고 그 후 단순하게 해당 경로에 테마를 복붙해버렸다.그 후 해당 경로의 최상단으로 이동한 후에bundle install를 입력해 bundle을 설치해준다.이제 한번 홈페이지를 봐보자!bundle exec jekyll servewebrick 오류가 발생한다면bundle add webrickjekyll serve 실행http://127.0.0.1:4000/의 주소가 출력되는데 이로 접속하면 테마가 적용된 것을 확인할 수 있다.접속하면 테마의 기본글이 존재한다. 이걸 초기화해야한다.bash tools/init.sh테마마다 다를 수 있지만 내가 적용한 테마는 해당 쉘스크립트를 통해 초기화가 가능했다._congif.yml자신에게 맞는 블로그를 설정하기 위해선 _congif.yml를 수정해야한다. timezone: Asia/Seoul #시간을 설정 title: User’s blog #타이틀 설정 description: #서브 타이틀 설정 url: ‘https://username.github.io’ #GitHub pages 주소 설정이정도만 일단 수정하자이제 GitHub에 push하여 jekyll을 GitHub page에 적용할 수 있다!git add -Agit commit -m &quot;setTheme&quot;git push이제 https://[username].github.io에 접속하면 블로그가 보인다!반영되는데 시간이 좀 소요된다. 10분 이상 기다렸음에도 적용되지 않는다면settings -&amp;gt; Github Pages -&amp;gt; 생성된 branch로 설정하면된다." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "WSL, Tutorial", "tags": "wsl, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "실험중입니다 이건 뭔지 또 모르겠This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml filegoogle_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = { &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;, &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;, &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % ( &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;, &#39;/admin/auth&#39; )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39; Tip: You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com. But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID pv: proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39; cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &amp;#8617; " } ]
