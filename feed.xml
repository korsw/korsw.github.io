<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://korsw.github.io/</id><title>Korsw' blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-03-04T22:48:32+09:00</updated> <author> <name>korsw</name> <uri>https://korsw.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://korsw.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://korsw.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 korsw </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>2022년 올해의 컬러, 베리 페리(Very Peri)</title><link href="https://korsw.github.io/posts/Design-With-Pantone-Color-Of-The-Year-2022/" rel="alternate" type="text/html" title="2022년 올해의 컬러, 베리 페리(Very Peri)" /><published>2022-02-11T17:00:00+09:00</published> <updated>2022-02-11T17:00:00+09:00</updated> <id>https://korsw.github.io/posts/Design-With-Pantone-Color-Of-The-Year-2022/</id> <content src="https://korsw.github.io/posts/Design-With-Pantone-Color-Of-The-Year-2022/" /> <author> <name>korsw</name> </author> <category term="Tip" /> <category term="Design" /> <summary> Pantone이 선정한 올해의 컬러는 베리 페리(PANTONE 17-3938 Very Peri)다 팬톤 색상 코드는 Pantone 17-3938, RBG는 102, 103, 171, HEX는 #6667AB이다 그냥 기록용입니다 </summary> </entry> <entry><title>안드로이드 활동 수명 주기 단계</title><link href="https://korsw.github.io/posts/Stages-of-the-activity-lifecycle/" rel="alternate" type="text/html" title="안드로이드 활동 수명 주기 단계" /><published>2022-02-10T22:27:07+09:00</published> <updated>2022-02-17T01:04:35+09:00</updated> <id>https://korsw.github.io/posts/Stages-of-the-activity-lifecycle/</id> <content src="https://korsw.github.io/posts/Stages-of-the-activity-lifecycle/" /> <author> <name>korsw</name> </author> <category term="Android" /> <category term="Android Theory" /> <summary> 잘못된 정보가 많을 수 있는 포스트입니다. 점차 수정중입니다 안드로이드에도 최초 초기화부터 메모리 회수까지의 라이프 사이클이 존재한다. 액티비티를 실행하고, 뒤로가고, 일시정지하고, 등등… 다양한 경우가 있기 때문에 이에 맞춰 변하는 라이프 사이클을 알면 좋을 것 같아서 글을 작성한다 Activity Lifecycle 액티비티 라이프 사이클 액티비티는 액티비티 스택에 의해서 관리된다. 보통 새로운 액티비티가 시작되면 스택의 맨 위에 배치되어 실행된다. 그 전에 실행되고 있던 액티비티는 스택의 아래에 남아있고, 새로운 액티비티가 종료되기 전까지는 다시 나타나지 않는다. 물론 한 화면에 여러개의 액티비티가 보일 수 있다. 액티비티의 상태에는 네 가지가 존재한다. ... </summary> </entry> <entry><title>AndroidTest의 AndroidJUnit4 requires a public constructor that takes a Class 에러 해결</title><link href="https://korsw.github.io/posts/AndroidJUnit4-requires/" rel="alternate" type="text/html" title="AndroidTest의 AndroidJUnit4 requires a public constructor that takes a Class 에러 해결" /><published>2022-02-06T22:54:12+09:00</published> <updated>2022-02-06T23:44:09+09:00</updated> <id>https://korsw.github.io/posts/AndroidJUnit4-requires/</id> <content src="https://korsw.github.io/posts/AndroidJUnit4-requires/" /> <author> <name>korsw</name> </author> <category term="Android" /> <category term="AndroidTest" /> <summary> 안드로이드 테스트를 공부하던 중에 정말 짜증나는 에러가 있었다. java.lang.RuntimeException: Delegate runner androidx.test.internal.runner.junit4.AndroidJUnit4ClassRunner for AndroidJUnit4 requires a public constructor that takes a Class&amp;lt;?&amp;gt;. 위 에러코드가 발생하면서 테스트 코드가 정상작동하지 않았다. 하루종일 헤매다가 gradle을 만지다가 해결했다. dependencies { /** * dependencies */ implementation 'androidx.test.ext:junit-ktx:1.1.3' ... </summary> </entry> <entry><title>컬렉션(Collection)을 알아보자</title><link href="https://korsw.github.io/posts/what-is-collections/" rel="alternate" type="text/html" title="컬렉션(Collection)을 알아보자" /><published>2022-01-25T22:38:50+09:00</published> <updated>2022-01-25T22:38:50+09:00</updated> <id>https://korsw.github.io/posts/what-is-collections/</id> <content src="https://korsw.github.io/posts/what-is-collections/" /> <author> <name>korsw</name> </author> <summary> 컬렉션(collection)은 요소(elements) 또는 항목(items)라고 부르는 동일한 타입을 가진 개체들의 그룹이다. Java나 Python의 컬렉션과 동일하게 List, Set, Map이 존재한다. List List(리스트)는 인덱스를 이용하여 요소에 액세스할 수 있는 정렬된 그룹으로 중복된 요소가 존재할 수 있다. ex) 전화번호 목록 Set Set(집합)은 순서에 상관없이 중복없이 고유한 요소들이 존재하는 그룹이다. 수학에서 말하는 그 집합과 유사하다 ex) 복권 번호 Map(or Dictionary) Map(맵)은 키-값 쌍으로 이뤄진 요소들의 그룹이다. 키는 고유하며, 각 키는 하나의 값만을 매핑하게 된다. 이때 값은 중복이 가능하다. ex) 직원 id </summary> </entry> <entry><title>코틀린의 가변인자(vararg)를 알아보자</title><link href="https://korsw.github.io/posts/kotlin-vararg/" rel="alternate" type="text/html" title="코틀린의 가변인자(vararg)를 알아보자" /><published>2022-01-19T01:13:22+09:00</published> <updated>2022-01-19T01:13:22+09:00</updated> <id>https://korsw.github.io/posts/kotlin-vararg/</id> <content src="https://korsw.github.io/posts/kotlin-vararg/" /> <author> <name>korsw</name> </author> <category term="Kotlin" /> <summary> vararg 코틀린을 사용하다가 함수나 클래스 등등에 여러개의 파라미터를 넘겨야 할 경우가 생기는 경우가 빈번하게 발생한다. 이럴때 사용할 수 있는게 vararg(Variable number of arguments)이다 fun &amp;lt;T&amp;gt; asList(vararg ts: T): List&amp;lt;T&amp;gt; { val result = ArrayList&amp;lt;T&amp;gt;() for (t in ts) result.add(t) return result } 위와 같이 파라미터에 vararg를 사용하여 함수의 파라미터를 받을 수 있다. 이때 파라미터 하나에만 사용할 수 있으며 보통 마지막 파라미터에 사용한다 val list = asList(1, 2, 3) 이렇게 사... </summary> </entry> </feed>
